apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'maven-publish'

// Hardcoded stuffs
// TODO: Consider making these property parameters too?
String nexusUrl = 'http://localhost:8081/nexus3'
String targetDir = 'target'

def repoList = [
    // TODO: Consider if we remove DEV?
    //  We never really deploy to DEV, that's the buildjob's job
    alpha: [
        from: 'N/A',
        target: 'repository/sponge-alpha/'
    ],
    beta: [
        from: 'repository/sponge-alpha/',
        target: 'repository/sponge-beta/'
    ],
    gamma: [
        from: 'repository/sponge-beta/',
        target: 'repository/sponge-gamma/'
    ],
    delta: [
        from: 'repository/sponge-gamma/',
        target: 'repository/sponge-delta/'
    ],
    epsilon: [
        from: 'repository/sponge-delta/',
        target: 'repository/sponge-epsilon/'
    ]
]

def targetEnvironment, pomFile
if (project.hasProperty('targetEnvironment') && project.hasProperty('pomFile')){
        targetEnvironment = project.properties.targetEnvironment
        pomFile = project.properties.pomFile
} else {
    print('''
        Usage:
            gradlew publish [--info]
            -P targetEnvironment=<targetEnviroment>
            -P pomFile=<pathToPomFile>
        ''')
    throw new InvalidUserDataException("Missing arguments.")
}


println 'Variables Map:'
def map =[
    'targetEnvironment: ':targetEnvironment,
    'to: ':pomFile
]
map.each{
    k,v -> println "* " + "${k}${v}"
}
println ""


def pomData = new XmlSlurper().parse(pomFile)
println "Artifact dependency from pomfile is ${pomData.groupId}:${pomData.artifactId}:${pomData.version}"

// Specify target to download through maven
repositories {
    maven {
        url "${nexusUrl}/${repoList.get(targetEnvironment).from}"
    }
}

// Ensure we've got the binary downloaded
dependencies{
    compile "${pomData.groupId}:${pomData.artifactId}:${pomData.version}"
}

task copyDependencies(type: Copy) {
   from configurations.compile
   into targetDir
}

def someFile = file("${targetDir}/${pomData.artifactId}-${pomData.version}.jar")
artifacts {
    archives someFile
}

// Set target Nexus repo/bucket to upload to
publishing.repositories {
    maven {
        url "${nexusUrl}/${repoList.get(targetEnvironment).target}"
        credentials {
            username "$mavenUser"
            password "$mavenPassword"
        }
    }
}

// Gradle-specific code to ensure this whole shebang works as intended
publishing.publications {
    mavenJava(MavenPublication) {
        groupId "${pomData.groupId}"
        artifactId "${pomData.artifactId}"
        version "${pomData.version}"

        artifact(someFile) {
            builtBy copyDependencies
        }
    }
}
